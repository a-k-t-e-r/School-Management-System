package UIs;

import Classes.AutomaticIdGenerator;
import Classes.ImageModel;
import Classes.StudentsModel;
import java.awt.Color;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

public class ProfileStudentAdd extends javax.swing.JFrame {

    AutomaticIdGenerator autoId;
    StudentsModel profileModel;
    ImageModel imageModel = new ImageModel();

    public ProfileStudentAdd() throws SQLException {
        this.autoId = new AutomaticIdGenerator();
        initComponents();
        jT_StudentId.setText("STU-" + (autoId.IdGenerator("ProfileStudentAdd")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelFundamental = new javax.swing.JPanel();
        jL_studentId = new javax.swing.JLabel();
        jT_StudentId = new javax.swing.JTextField();
        jT_StudentName = new javax.swing.JTextField();
        jL_studentName = new javax.swing.JLabel();
        jL_StudentPhoto = new javax.swing.JLabel();
        jL_class = new javax.swing.JLabel();
        jC_Class = new javax.swing.JComboBox<>();
        jL_section = new javax.swing.JLabel();
        jC_Section = new javax.swing.JComboBox<>();
        jL_major = new javax.swing.JLabel();
        jC_Major = new javax.swing.JComboBox<>();
        jL_parmanentAddr = new javax.swing.JLabel();
        scrlPAddr = new javax.swing.JScrollPane();
        jTA_ParmanentAddr = new javax.swing.JTextArea();
        jL_dateOfBirth = new javax.swing.JLabel();
        jRB_guardianMother = new javax.swing.JRadioButton();
        jL_gender = new javax.swing.JLabel();
        jRB_guardianFather = new javax.swing.JRadioButton();
        jT_MotherName = new javax.swing.JTextField();
        jT_FatherName = new javax.swing.JTextField();
        jL_guardianContact = new javax.swing.JLabel();
        jRB_guardianOther = new javax.swing.JRadioButton();
        jCB_genderMale = new javax.swing.JCheckBox();
        separatorFundamental = new javax.swing.JSeparator();
        jL_nationality = new javax.swing.JLabel();
        jL_motherName = new javax.swing.JLabel();
        jL_religion = new javax.swing.JLabel();
        jCB_genderFemale = new javax.swing.JCheckBox();
        jL_bloodGroup = new javax.swing.JLabel();
        jC_BloodGroup = new javax.swing.JComboBox<>();
        jC_Religion = new javax.swing.JComboBox<>();
        J_fatherName = new javax.swing.JLabel();
        jT_guardianContact = new javax.swing.JTextField();
        jL_guardian = new javax.swing.JLabel();
        jL_temporaryAddr = new javax.swing.JLabel();
        scrlTAddr = new javax.swing.JScrollPane();
        jTA_TemporaryAddr = new javax.swing.JTextArea();
        jC_Nationality = new javax.swing.JComboBox<>();
        jDC_DateOfBirth = new com.toedter.calendar.JDateChooser();
        jCB_AddressSame = new javax.swing.JCheckBox();
        panelControls = new javax.swing.JPanel();
        jB_save = new javax.swing.JButton();
        jB_refresh = new javax.swing.JButton();
        jB_update = new javax.swing.JButton();
        jB_delete = new javax.swing.JButton();
        panelSearch = new javax.swing.JPanel();
        jT_searchBox = new javax.swing.JTextField();
        jB_searching = new javax.swing.JButton();
        jL_searchStudentId = new javax.swing.JLabel();
        jL_status = new javax.swing.JLabel();
        jL_schoolLogo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        panelFundamental.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Fundamental Information"));
        panelFundamental.setToolTipText("Fundamental Information");

        jL_studentId.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_studentId.setText("Student Id/Roll");
        jL_studentId.setToolTipText("Student Id/Roll");

        jT_StudentId.setEditable(false);
        jT_StudentId.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jT_StudentId.setToolTipText("it's generate automatically");

        jT_StudentName.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jT_StudentName.setToolTipText("full name required");

        jL_studentName.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_studentName.setText("Student Name");
        jL_studentName.setToolTipText("Student Name");

        jL_StudentPhoto.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_StudentPhoto.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jL_StudentPhoto.setText("<html><body><p style=\"text-align:center;\">Student<br\\>Photo</p></body></html>");
        jL_StudentPhoto.setToolTipText("only formal photo required");
        jL_StudentPhoto.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jL_StudentPhoto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jL_StudentPhotoMouseClicked(evt);
            }
        });

        jL_class.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_class.setText("Class");
        jL_class.setToolTipText("Class");

        jC_Class.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jC_Class.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<select>", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten" }));
        jC_Class.setToolTipText("select class number");
        jC_Class.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jC_ClassActionPerformed(evt);
            }
        });

        jL_section.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_section.setText("Section");
        jL_section.setToolTipText("Section");

        jC_Section.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jC_Section.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<select>", "A", "B", "C", "D", "E" }));
        jC_Section.setToolTipText("select section type");

        jL_major.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_major.setText("Major");
        jL_major.setToolTipText("Major");

        jC_Major.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jC_Major.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<select>", "Science", "Comerce", "Arts" }));
        jC_Major.setToolTipText("select group of major");

        jL_parmanentAddr.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_parmanentAddr.setText("Parmanent Address");
        jL_parmanentAddr.setToolTipText("Parmanent Address");

        jTA_ParmanentAddr.setColumns(20);
        jTA_ParmanentAddr.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jTA_ParmanentAddr.setRows(5);
        jTA_ParmanentAddr.setToolTipText("write address with all required infomation");
        scrlPAddr.setViewportView(jTA_ParmanentAddr);

        jL_dateOfBirth.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_dateOfBirth.setText("Date of Birth");
        jL_dateOfBirth.setToolTipText("Date of Birth");

        jRB_guardianMother.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jRB_guardianMother.setText("Mother");
        jRB_guardianMother.setToolTipText("select mother as guardian");
        jRB_guardianMother.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRB_guardianMotherActionPerformed(evt);
            }
        });

        jL_gender.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_gender.setText("Gender");
        jL_gender.setToolTipText("Gender");

        jRB_guardianFather.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jRB_guardianFather.setText("Father");
        jRB_guardianFather.setToolTipText("select father as guardian");
        jRB_guardianFather.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRB_guardianFatherActionPerformed(evt);
            }
        });

        jT_MotherName.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jT_MotherName.setToolTipText("full name required");

        jT_FatherName.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jT_FatherName.setToolTipText("full name required");

        jL_guardianContact.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_guardianContact.setText("Guardian Contact");
        jL_guardianContact.setToolTipText("Guardian Contact");

        jRB_guardianOther.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jRB_guardianOther.setText("Other");
        jRB_guardianOther.setToolTipText("if have other guardian");
        jRB_guardianOther.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRB_guardianOtherActionPerformed(evt);
            }
        });

        jCB_genderMale.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jCB_genderMale.setText(" Male");
        jCB_genderMale.setToolTipText("select for male student");
        jCB_genderMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_genderMaleActionPerformed(evt);
            }
        });

        separatorFundamental.setBackground(new java.awt.Color(255, 0, 0));

        jL_nationality.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_nationality.setText("Nationality");
        jL_nationality.setToolTipText("Nationality");

        jL_motherName.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_motherName.setText("Mother Name");
        jL_motherName.setToolTipText("Mother Name");

        jL_religion.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_religion.setText("Religion");
        jL_religion.setToolTipText("Religion");

        jCB_genderFemale.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jCB_genderFemale.setText(" Female");
        jCB_genderFemale.setToolTipText("select for female student");
        jCB_genderFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_genderFemaleActionPerformed(evt);
            }
        });

        jL_bloodGroup.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_bloodGroup.setText("Blood Group");
        jL_bloodGroup.setToolTipText("Blood Group");

        jC_BloodGroup.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jC_BloodGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<select>", "O−", "O+", "A−", "A+", "B−", "B+", "AB−", "AB+" }));
        jC_BloodGroup.setToolTipText("select blood groups of student");

        jC_Religion.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jC_Religion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<select>", "Islam", "Christianity", "Buddhism", "Hinduism", "Nonreligious", "Chinese traditional religion", "Primal-indigenous", "African traditional and Diasporic", "Sikhism", "Juche", "Spiritism", "Judaism", "Bahai", "Jainism", "Shinto", "Cao Dai", "Zoroastrianism", "Tenrikyo", "Neo-Paganism", "Unitarian-Universalism" }));
        jC_Religion.setToolTipText("select religion name");

        J_fatherName.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        J_fatherName.setText("Father Name");
        J_fatherName.setToolTipText("Father Name");

        jT_guardianContact.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jT_guardianContact.setToolTipText("enter guardian contact number");

        jL_guardian.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_guardian.setText("Guardian");
        jL_guardian.setToolTipText("Guardian");

        jL_temporaryAddr.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_temporaryAddr.setText("Temporary Address");
        jL_temporaryAddr.setToolTipText("Temporary Address");

        jTA_TemporaryAddr.setColumns(20);
        jTA_TemporaryAddr.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jTA_TemporaryAddr.setRows(5);
        jTA_TemporaryAddr.setToolTipText("write address with all required infomation");
        scrlTAddr.setViewportView(jTA_TemporaryAddr);

        jC_Nationality.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jC_Nationality.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<select>", "Afghan", "Albanian", "Algerian", "American", "Andorran", "Angolan", "Antiguans", "Argentinean", "Armenian", "Australian", "Austrian", "Azerbaijani", "Bahamian", "Bahraini", "Bangladeshi", "Barbadian", "Barbudans", "Batswana", "Belarusian", "Belgian", "Belizean", "Beninese", "Bhutanese", "Bolivian", "Bosnian", "Brazilian", "British", "Bruneian", "Bulgarian", "Burkinabe", "Burmese", "Burundian", "Cambodian", "Cameroonian", "Canadian", "Cape Verdean", "Central African", "Chadian", "Chilean", "Chinese", "Colombian", "Comoran", "Congolese", "Costa Rican", "Croatian", "Cuban", "Cypriot", "Czech", "Danish", "Djibouti", "Dominican", "Dutch", "East Timorese", "Ecuadorean", "Egyptian", "Emirian", "Equatorial Guinean", "Eritrean", "Estonian", "Ethiopian", "Fijian", "Filipino", "Finnish", "French", "Gabonese", "Gambian", "Georgian", "German", "Ghanaian", "Greek", "Grenadian", "Guatemalan", "Guinea-Bissauan", "Guinean", "Guyanese", "Haitian", "Herzegovinian", "Honduran", "Hungarian", "I-Kiribati", "Icelander", "Indian", "Indonesian", "Iranian", "Iraqi", "Irish", "Israeli", "Italian", "Ivorian", "Jamaican", "Japanese", "Jordanian", "Kazakhstani", "Kenyan", "Kittian and Nevisian", "Kuwaiti", "Kyrgyz", "Laotian", "Latvian", "Lebanese", "Liberian", "Libyan", "Liechtensteiner", "Lithuanian", "Luxembourger", "Macedonian", "Malagasy", "Malawian", "Malaysian", "Maldivian", "Malian", "Maltese", "Marshallese", "Mauritanian", "Mauritian", "Mexican", "Micronesian", "Moldovan", "Monacan", "Mongolian", "Moroccan", "Mosotho", "Motswana", "Mozambican", "Namibian", "Nauruan", "Nepalese", "New Zealander", "Ni-Vanuatu", "Nicaraguan", "Nigerian", "Nigerien", "North Korean", "Northern Irish", "Norwegian", "Omani", "Pakistani", "Palauan", "Panamanian", "Papua New Guinean", "Paraguayan", "Peruvian", "Polish", "Portuguese", "Qatari", "Romanian", "Russian", "Rwandan", "Saint Lucian", "Salvadoran", "Samoan", "San Marinese", "Sao Tomean", "Saudi", "Scottish", "Senegalese", "Serbian", "Seychellois", "Sierra Leonean", "Singaporean", "Slovakian", "Slovenian", "Solomon Islander", "Somali", "South African", "South Korean", "Spanish", "Sri Lankan", "Sudanese", "Surinamer", "Swazi", "Swedish", "Swiss", "Syrian", "Taiwanese", "Tajik", "Tanzanian", "Thai", "Togolese", "Tongan", "Trinidadian or Tobagonian", "Tunisian", "Turkish", "Tuvaluan", "Ugandan", "Ukrainian", "Uruguayan", "Uzbekistani", "Venezuelan", "Vietnamese", "Welsh", "Yemenite", "Zambian", "Zimbabwean" }));
        jC_Nationality.setToolTipText("select student nationality");

        jDC_DateOfBirth.setToolTipText("choose data of birth");
        jDC_DateOfBirth.setDateFormatString("yyyy-MM-dd");
        jDC_DateOfBirth.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N

        jCB_AddressSame.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jCB_AddressSame.setText(" Same");
        jCB_AddressSame.setToolTipText("if both addresses are same");
        jCB_AddressSame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCB_AddressSameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelFundamentalLayout = new javax.swing.GroupLayout(panelFundamental);
        panelFundamental.setLayout(panelFundamentalLayout);
        panelFundamentalLayout.setHorizontalGroup(
            panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFundamentalLayout.createSequentialGroup()
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelFundamentalLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(separatorFundamental, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(panelFundamentalLayout.createSequentialGroup()
                            .addGap(22, 22, 22)
                            .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(panelFundamentalLayout.createSequentialGroup()
                                    .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(J_fatherName)
                                        .addComponent(jL_motherName)
                                        .addComponent(jL_guardian))
                                    .addGap(66, 66, 66)
                                    .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jT_MotherName)
                                        .addComponent(jT_FatherName)))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelFundamentalLayout.createSequentialGroup()
                                    .addComponent(jL_guardianContact)
                                    .addGap(26, 26, 26)
                                    .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jT_guardianContact)
                                        .addGroup(panelFundamentalLayout.createSequentialGroup()
                                            .addComponent(jRB_guardianFather)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jRB_guardianMother)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jRB_guardianOther))))))
                        .addGroup(panelFundamentalLayout.createSequentialGroup()
                            .addGap(23, 23, 23)
                            .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(panelFundamentalLayout.createSequentialGroup()
                                    .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jL_studentId)
                                        .addComponent(jL_studentName)
                                        .addComponent(jL_class)
                                        .addComponent(jL_section)
                                        .addComponent(jL_major)
                                        .addComponent(jL_parmanentAddr)
                                        .addComponent(jL_temporaryAddr)
                                        .addComponent(jL_dateOfBirth)
                                        .addComponent(jL_gender)
                                        .addComponent(jL_bloodGroup)
                                        .addComponent(jL_religion)
                                        .addComponent(jL_nationality))
                                    .addGap(18, 18, 18)
                                    .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jT_StudentName)
                                        .addComponent(jC_Class, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jC_Section, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jC_Major, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(scrlPAddr)
                                        .addComponent(scrlTAddr)
                                        .addComponent(jC_BloodGroup, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jT_StudentId)
                                        .addComponent(jC_Religion, 0, 0, Short.MAX_VALUE)
                                        .addComponent(jC_Nationality, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jDC_DateOfBirth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(panelFundamentalLayout.createSequentialGroup()
                                    .addGap(164, 164, 164)
                                    .addComponent(jCB_genderMale)
                                    .addGap(35, 35, 35)
                                    .addComponent(jCB_genderFemale)))
                            .addGap(18, 18, 18)
                            .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jL_StudentPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jCB_AddressSame)))))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        panelFundamentalLayout.setVerticalGroup(
            panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelFundamentalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelFundamentalLayout.createSequentialGroup()
                        .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jT_StudentId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_studentId))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jT_StudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_studentName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jC_Class, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_class))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jC_Section, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_section)))
                    .addComponent(jL_StudentPhoto, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jC_Major, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jL_major))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(scrlPAddr, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jL_parmanentAddr))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(scrlTAddr, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jL_temporaryAddr)
                    .addComponent(jCB_AddressSame))
                .addGap(11, 11, 11)
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jL_dateOfBirth)
                    .addComponent(jDC_DateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jCB_genderMale)
                    .addComponent(jCB_genderFemale)
                    .addComponent(jL_gender))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jL_bloodGroup)
                    .addComponent(jC_BloodGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jC_Religion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jL_religion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jC_Nationality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jL_nationality))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(separatorFundamental, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jT_FatherName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(J_fatherName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jL_motherName)
                    .addComponent(jT_MotherName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jL_guardian)
                    .addComponent(jRB_guardianFather)
                    .addComponent(jRB_guardianMother)
                    .addComponent(jRB_guardianOther))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelFundamentalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jL_guardianContact)
                    .addComponent(jT_guardianContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panelControls.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)), "Controls"));
        panelControls.setToolTipText("Controls");

        jB_save.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jB_save.setText("S A V E");
        jB_save.setToolTipText("store all information into database");
        jB_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_saveActionPerformed(evt);
            }
        });

        jB_refresh.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jB_refresh.setText("R E F R E S H");
        jB_refresh.setToolTipText("clear everything");
        jB_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_refreshActionPerformed(evt);
            }
        });

        jB_update.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jB_update.setText("U P D A T E");
        jB_update.setToolTipText("before updating search for necessary inforamtion");
        jB_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_updateActionPerformed(evt);
            }
        });

        jB_delete.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jB_delete.setText("D E L E T E");
        jB_delete.setToolTipText("remove data from storage, before that search for necessary information");
        jB_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelControlsLayout = new javax.swing.GroupLayout(panelControls);
        panelControls.setLayout(panelControlsLayout);
        panelControlsLayout.setHorizontalGroup(
            panelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelControlsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jB_refresh, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jB_delete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jB_update, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jB_save, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelControlsLayout.setVerticalGroup(
            panelControlsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelControlsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jB_save, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jB_refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jB_update, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jB_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)), "Search by Id/Roll"));
        panelSearch.setToolTipText("Search by Id/Roll");

        jT_searchBox.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jT_searchBox.setToolTipText("Serach by Id/Roll or, Name");

        jB_searching.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jB_searching.setText("searching...");
        jB_searching.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jB_searchingActionPerformed(evt);
            }
        });

        jL_searchStudentId.setFont(new java.awt.Font("Lucida Console", 0, 14)); // NOI18N
        jL_searchStudentId.setText("Student Id/Roll");
        jL_searchStudentId.setToolTipText("Student Id/Roll");

        javax.swing.GroupLayout panelSearchLayout = new javax.swing.GroupLayout(panelSearch);
        panelSearch.setLayout(panelSearchLayout);
        panelSearchLayout.setHorizontalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jL_searchStudentId)
                    .addComponent(jT_searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jB_searching))
                .addContainerGap())
        );
        panelSearchLayout.setVerticalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jL_searchStudentId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jT_searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jB_searching)
                .addContainerGap())
        );

        jL_status.setBackground(new java.awt.Color(0, 0, 0));
        jL_status.setFont(new java.awt.Font("Times New Roman", 2, 14)); // NOI18N
        jL_status.setForeground(new java.awt.Color(255, 0, 0));
        jL_status.setText("Status...");
        jL_status.setToolTipText("Status...");

        jL_schoolLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/School Logo Large.png"))); // NOI18N
        jL_schoolLogo.setText("School Logo");
        jL_schoolLogo.setToolTipText("School Logo");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jL_status)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(panelFundamental, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(panelControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jL_schoolLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelFundamental, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jL_schoolLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(panelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(panelControls, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addComponent(jL_status)
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshThisForm() {
        jT_StudentId.setText("STU-" + (autoId.IdGenerator("ProfileStudentAdd")));
        jT_StudentName.setText("");
        jL_StudentPhoto.setIcon(null);
        jL_StudentPhoto.setText("<html><body><p style=\"text-align:center;\">Student<br\\>Photo</p></body></html>");
        jL_StudentPhoto.setBorder(javax.swing.BorderFactory.createLineBorder(Color.BLACK));
        jC_Class.setSelectedItem("<select>");
        jC_Section.setSelectedItem("<select>");
        jC_Major.setSelectedItem("<select>");
        jTA_ParmanentAddr.setText("");
        jCB_AddressSame.setSelected(false);
        jTA_TemporaryAddr.setText("");
        ((JTextField) jDC_DateOfBirth.getDateEditor().getUiComponent()).setText("");
        jCB_genderMale.setSelected(false);
        jCB_genderFemale.setSelected(false);
        jC_BloodGroup.setSelectedItem("<select>");
        jC_Religion.setSelectedItem("<select>");
        jC_Nationality.setSelectedItem("<select>");
        jT_FatherName.setText("");
        jT_MotherName.setText("");
        jRB_guardianFather.setSelected(false);
        jRB_guardianMother.setSelected(false);
        jRB_guardianOther.setSelected(false);
        jT_guardianContact.setText("");
        jT_searchBox.setText("");
        jL_status.setText("Status...");
    }

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.setLocationRelativeTo(null);
    }//GEN-LAST:event_formWindowOpened

    private void jCB_genderMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_genderMaleActionPerformed
        if (jCB_genderMale.isSelected()) {
            jCB_genderFemale.setSelected(false);
        }
    }//GEN-LAST:event_jCB_genderMaleActionPerformed

    private void jCB_genderFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_genderFemaleActionPerformed
        if (jCB_genderFemale.isSelected()) {
            jCB_genderMale.setSelected(false);
        }
    }//GEN-LAST:event_jCB_genderFemaleActionPerformed

    private void jRB_guardianFatherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRB_guardianFatherActionPerformed
        if (jRB_guardianFather.isSelected()) {
            jRB_guardianMother.setSelected(false);
            jRB_guardianOther.setSelected(false);
        }
    }//GEN-LAST:event_jRB_guardianFatherActionPerformed

    private void jRB_guardianMotherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRB_guardianMotherActionPerformed
        if (jRB_guardianMother.isSelected()) {
            jRB_guardianFather.setSelected(false);
            jRB_guardianOther.setSelected(false);
        }
    }//GEN-LAST:event_jRB_guardianMotherActionPerformed

    private void jRB_guardianOtherActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRB_guardianOtherActionPerformed
        if (jRB_guardianOther.isSelected()) {
            jRB_guardianFather.setSelected(false);
            jRB_guardianMother.setSelected(false);
        }
    }//GEN-LAST:event_jRB_guardianOtherActionPerformed

    private void jB_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_saveActionPerformed
        try {
            String sqlString = "INSERT INTO STUDENTDATASET(STUID, STUNAME, STUPHOTO, STUCLASS"
                    + ", STUSECTION, STUMAJOR, STUPADDRESS, STUTADDRESS, STUDATEOFBIRTH"
                    + ", STUGENDER, STUBLOODGROUP, STURELIGION, STUNATIONALITY, STUFATHERNAME"
                    + ", STUMOTHERNAME, STUGUARDIAN, STUGUARDIANCONTACT) VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
            profileModel = new StudentsModel();
            profileModel.Id = jT_StudentId.getText().toUpperCase();
            profileModel.Name = jT_StudentName.getText().toUpperCase();
            profileModel.photographInByte = imageModel.ConvertImageToByteArray(jL_StudentPhoto.getIcon());
            profileModel.Class = jC_Class.getSelectedItem().toString().toUpperCase();
            profileModel.Section = jC_Section.getSelectedItem().toString().toUpperCase();
            if (jC_Major.isEnabled()) {
                profileModel.Major = jC_Major.getSelectedItem().toString().toUpperCase();
            } else {
                profileModel.Major = "N/A";
            }
            profileModel.ParmanentAddr = jTA_ParmanentAddr.getText().toUpperCase();
            profileModel.TemporaryAddr = jTA_TemporaryAddr.getText().toUpperCase();
            profileModel.DateOfBirth = ((JTextField) jDC_DateOfBirth.getDateEditor().getUiComponent()).getText();
            profileModel.Gender = (jCB_genderMale.isSelected()) ? "Male".toUpperCase() : "Female".toUpperCase();
            profileModel.BloodGroup = jC_BloodGroup.getSelectedItem().toString();
            profileModel.Religion = jC_Religion.getSelectedItem().toString().toUpperCase();
            profileModel.Nationality = jC_Nationality.getSelectedItem().toString().toUpperCase();
            profileModel.FatherName = jT_FatherName.getText().toUpperCase();
            profileModel.MotherName = jT_MotherName.getText().toUpperCase();
            profileModel.Guardian = (jRB_guardianFather.isSelected()) ? "Father".toUpperCase() : (jRB_guardianMother.isSelected()) ? "Mother".toUpperCase() : "Other".toUpperCase();
            profileModel.GuardianContact = jT_guardianContact.getText();
            String feedBack = profileModel.ValidityCheck();
            if ("Checked!!!".equals(feedBack)) {
                feedBack = profileModel.SaveStuProfile(sqlString);
            }
            JOptionPane.showMessageDialog(this, feedBack);
            jL_status.setText(feedBack);
            RefreshThisForm();
        } catch (SQLException ex) {
            Logger.getLogger(ProfileStudentAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jB_saveActionPerformed

    private void jL_StudentPhotoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jL_StudentPhotoMouseClicked
        imageModel = new ImageModel();
        jL_StudentPhoto.setIcon(imageModel.AddImage());
        jL_StudentPhoto.setText("");
        jL_StudentPhoto.setBorder(javax.swing.BorderFactory.createEmptyBorder());
        jL_status.setText(imageModel.FileURL);
    }//GEN-LAST:event_jL_StudentPhotoMouseClicked

    private void jB_searchingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_searchingActionPerformed
        try {
            String sqlString = "SELECT * FROM STUDENTDATASET WHERE STUID = ?";

            profileModel = new StudentsModel();
            profileModel.SearchId = jT_searchBox.getText().toUpperCase();
            String feedBack = profileModel.SearchStuProfile(sqlString);
            if ("All Retrive".equals(feedBack)) {
                jT_StudentId.setText(profileModel.Id);
                jT_StudentName.setText(profileModel.Name);
                jL_StudentPhoto.setIcon(profileModel.photographInIcon);
                for (int i = 0; i < jC_Class.getModel().getSize(); i++) {
                    if (profileModel.Class.toLowerCase().equals(jC_Class.getModel().getElementAt(i).toLowerCase())) {
                        jC_Class.setSelectedIndex(i);
                        break;
                    }
                }
                jC_Section.setSelectedItem(profileModel.Section);
                if ("N/A".equals(profileModel.Major)) {
                    jC_Major.setEnabled(false);
                } else {
                    for (int i = 0; i < jC_Major.getModel().getSize(); i++) {
                        if (profileModel.Major.toLowerCase().equals(jC_Major.getModel().getElementAt(i).toLowerCase())) {
                            jC_Major.setSelectedIndex(i);
                            break;
                        }
                    }
                }
                jTA_ParmanentAddr.setText(profileModel.ParmanentAddr);
                jTA_TemporaryAddr.setText(profileModel.TemporaryAddr);
                jDC_DateOfBirth.setDate(new SimpleDateFormat("yyyy-MM-dd").parse(profileModel.DateOfBirth));
                if ("male".equals(profileModel.Gender.toLowerCase())) {
                    jCB_genderMale.setSelected(true);
                } else {
                    jCB_genderFemale.setSelected(true);
                }
                jC_BloodGroup.setSelectedItem(profileModel.BloodGroup);
                for (int i = 0; i < jC_Religion.getModel().getSize(); i++) {
                    if (profileModel.Religion.toLowerCase().equals(jC_Religion.getModel().getElementAt(i).toLowerCase())) {
                        jC_Religion.setSelectedIndex(i);
                        break;
                    }
                }
                for (int i = 0; i < jC_Nationality.getModel().getSize(); i++) {
                    if (profileModel.Nationality.toLowerCase().equals(jC_Nationality.getModel().getElementAt(i).toLowerCase())) {
                        jC_Nationality.setSelectedIndex(i);
                        break;
                    }
                }
                jT_FatherName.setText(profileModel.FatherName);
                jT_MotherName.setText(profileModel.MotherName);
                if ("father".equals(profileModel.Guardian.toLowerCase())) {
                    jRB_guardianFather.setSelected(true);
                } else if ("mother".equals(profileModel.Guardian.toLowerCase())) {
                    jRB_guardianMother.setSelected(true);
                } else {
                    jRB_guardianOther.setSelected(true);
                }
                jT_guardianContact.setText(profileModel.GuardianContact);
            }
            jL_StudentPhoto.setText("");
            jL_StudentPhoto.setBorder(javax.swing.BorderFactory.createEmptyBorder());
            jL_status.setText("All Information Retrived...");
        } catch (SQLException ex) {
            Logger.getLogger(ProfileStudentAdd.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(ProfileStudentAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jB_searchingActionPerformed

    private void jB_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_updateActionPerformed
        try {
            String sqlString = "UPDATE STUDENTDATASET SET STUID = ?, STUNAME = ?, STUPHOTO = ?, STUCLASS = ?"
                    + ", STUSECTION = ?, STUMAJOR = ?, STUPADDRESS = ?, STUTADDRESS = ?, STUDATEOFBIRTH = ?"
                    + ", STUGENDER = ?, STUBLOODGROUP = ?, STURELIGION = ?, STUNATIONALITY = ?, STUFATHERNAME = ?"
                    + ", STUMOTHERNAME = ?, STUGUARDIAN = ?, STUGUARDIANCONTACT = ? WHERE STUID = ?";
            profileModel = new StudentsModel();
            profileModel.Id = jT_StudentId.getText().toUpperCase();
            profileModel.Name = jT_StudentName.getText().toUpperCase();
            profileModel.photographInByte = imageModel.ConvertImageToByteArray(jL_StudentPhoto.getIcon());
            profileModel.Class = jC_Class.getSelectedItem().toString();
            profileModel.Section = jC_Section.getSelectedItem().toString().toUpperCase();
            if ((("X".equals(jC_Class.getSelectedItem())) || "IX".equals(jC_Class.getSelectedItem()))) {
                profileModel.Major = jC_Major.getSelectedItem().toString().toUpperCase();
            } else {
                profileModel.Major = "No Major";
            }
            profileModel.ParmanentAddr = jTA_ParmanentAddr.getText().toUpperCase();
            profileModel.TemporaryAddr = jTA_TemporaryAddr.getText().toUpperCase();
            profileModel.DateOfBirth = ((JTextField) jDC_DateOfBirth.getDateEditor().getUiComponent()).getText();
            profileModel.Gender = (jCB_genderMale.isSelected()) ? "Male".toUpperCase() : "Female".toUpperCase();
            profileModel.BloodGroup = jC_BloodGroup.getSelectedItem().toString();
            profileModel.Religion = jC_Religion.getSelectedItem().toString().toUpperCase();
            profileModel.Nationality = jC_Nationality.getSelectedItem().toString().toUpperCase();
            profileModel.FatherName = jT_FatherName.getText().toUpperCase();
            profileModel.MotherName = jT_MotherName.getText().toUpperCase();
            profileModel.Guardian = (jRB_guardianFather.isSelected()) ? "Father".toUpperCase() : (jRB_guardianMother.isSelected()) ? "Mother".toUpperCase() : "Other".toUpperCase();
            profileModel.GuardianContact = jT_guardianContact.getText();

            profileModel.SearchId = jT_searchBox.getText().toUpperCase();

            String feedBack = profileModel.ValidityCheck();
            if ("Checked!!!".equals(feedBack)) {
                feedBack = profileModel.UpdateStuProfile(sqlString);
            }
            JOptionPane.showMessageDialog(this, feedBack);
            jL_status.setText(feedBack);
            RefreshThisForm();
        } catch (SQLException ex) {
            Logger.getLogger(ProfileStudentAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jB_updateActionPerformed

    private void jB_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_refreshActionPerformed
        RefreshThisForm();
        jT_StudentId.setText("STU-" + (autoId.IdGenerator("ProfileStudentAdd")));
    }//GEN-LAST:event_jB_refreshActionPerformed

    private void jC_ClassActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jC_ClassActionPerformed
        if (("<select>".equals(jC_Class.getSelectedItem())
                || ("Nine".equals(jC_Class.getSelectedItem()) || ("Ten".equals(jC_Class.getSelectedItem()))))) {
            jL_major.setEnabled(true);
            jC_Major.setEnabled(true);
        } else {
            jL_major.setEnabled(false);
            jC_Major.setEnabled(false);
        }
    }//GEN-LAST:event_jC_ClassActionPerformed

    private void jB_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jB_deleteActionPerformed
        try {
            String sqlString = "DELETE FROM STUDENTDATASET WHERE STUID = ?";
            profileModel = new StudentsModel();
            profileModel.SearchId = jT_searchBox.getText().toUpperCase();
            String feedBack = profileModel.DeleteStuProfile(sqlString);
            JOptionPane.showMessageDialog(this, feedBack);
            jL_status.setText(feedBack);
            RefreshThisForm();
        } catch (SQLException ex) {
            Logger.getLogger(ProfileStudentAdd.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jB_deleteActionPerformed

    private void jCB_AddressSameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCB_AddressSameActionPerformed
        if (jCB_AddressSame.isSelected()) {
            jTA_TemporaryAddr.setText(jTA_ParmanentAddr.getText());
            jTA_TemporaryAddr.setEditable(false);
        } else {
            jTA_TemporaryAddr.setText("");
            jTA_TemporaryAddr.setEditable(true);
        }
    }//GEN-LAST:event_jCB_AddressSameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProfileStudentAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProfileStudentAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProfileStudentAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProfileStudentAdd.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new ProfileStudentAdd().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(ProfileStudentAdd.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel J_fatherName;
    private javax.swing.JButton jB_delete;
    private javax.swing.JButton jB_refresh;
    private javax.swing.JButton jB_save;
    private javax.swing.JButton jB_searching;
    private javax.swing.JButton jB_update;
    private javax.swing.JCheckBox jCB_AddressSame;
    private javax.swing.JCheckBox jCB_genderFemale;
    private javax.swing.JCheckBox jCB_genderMale;
    private javax.swing.JComboBox<String> jC_BloodGroup;
    private javax.swing.JComboBox<String> jC_Class;
    private javax.swing.JComboBox<String> jC_Major;
    private javax.swing.JComboBox<String> jC_Nationality;
    private javax.swing.JComboBox<String> jC_Religion;
    private javax.swing.JComboBox<String> jC_Section;
    private com.toedter.calendar.JDateChooser jDC_DateOfBirth;
    private javax.swing.JLabel jL_StudentPhoto;
    private javax.swing.JLabel jL_bloodGroup;
    private javax.swing.JLabel jL_class;
    private javax.swing.JLabel jL_dateOfBirth;
    private javax.swing.JLabel jL_gender;
    private javax.swing.JLabel jL_guardian;
    private javax.swing.JLabel jL_guardianContact;
    private javax.swing.JLabel jL_major;
    private javax.swing.JLabel jL_motherName;
    private javax.swing.JLabel jL_nationality;
    private javax.swing.JLabel jL_parmanentAddr;
    private javax.swing.JLabel jL_religion;
    private javax.swing.JLabel jL_schoolLogo;
    private javax.swing.JLabel jL_searchStudentId;
    private javax.swing.JLabel jL_section;
    private javax.swing.JLabel jL_status;
    private javax.swing.JLabel jL_studentId;
    private javax.swing.JLabel jL_studentName;
    private javax.swing.JLabel jL_temporaryAddr;
    private javax.swing.JRadioButton jRB_guardianFather;
    private javax.swing.JRadioButton jRB_guardianMother;
    private javax.swing.JRadioButton jRB_guardianOther;
    private javax.swing.JTextArea jTA_ParmanentAddr;
    private javax.swing.JTextArea jTA_TemporaryAddr;
    private javax.swing.JTextField jT_FatherName;
    private javax.swing.JTextField jT_MotherName;
    private javax.swing.JTextField jT_StudentId;
    private javax.swing.JTextField jT_StudentName;
    private javax.swing.JTextField jT_guardianContact;
    private javax.swing.JTextField jT_searchBox;
    private javax.swing.JPanel panelControls;
    private javax.swing.JPanel panelFundamental;
    private javax.swing.JPanel panelSearch;
    private javax.swing.JScrollPane scrlPAddr;
    private javax.swing.JScrollPane scrlTAddr;
    private javax.swing.JSeparator separatorFundamental;
    // End of variables declaration//GEN-END:variables
}
